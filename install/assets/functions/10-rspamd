#!/command/with-contenv bash

clam_ready() {
    if var_nottrue "${SKIP_CLAMAV_HOST_CHECK}" ; then
        print_debug "Checking to see if ClamAV Host: ${CLAMAV_HOST} is accessible"
        counter=0
        while ! (silent nc -z "${CLAMAV_HOST}" "${CLAMAV_PORT}") ; do
            sleep 5
            (( counter+=5 ))
            print_warn "Clamav Host '${CLAMAV_HOST}' is not accessible, retrying.. ($counter seconds so far)"
        done
    fi
}

nameserver_ready() {
    if var_nottrue "${SKIP_NAMESERVER_HOST_CHECK}" ; then
        print_debug "Checking to see if Nameserver Host: ${NAMESERVER} is accessible"
        counter=0
        while ! (silent nc -z "${NAMESERVER}" 53) ; do
            sleep 5
            (( counter+=5 ))
            print_warn "Nameserver Host '${NAMESERVER}' is not accessible, retrying.. ($counter seconds so far)"
        done
    fi
}

olefy_ready() {
    if var_nottrue "${SKIP_OLEFY_HOST_CHECK}" ; then
        print_debug "Checking to see if Olefy Host: ${OLETOOLS_HOST} is accessible"
        counter=0
        while ! (silent nc -z "${OLETOOLS_HOST}" "${OLETOOLS_PORT}") ; do
            sleep 5
            (( counter+=5 ))
            print_warn "Olefy Host '${OLETOOLS_HOST}' is not accessible, retrying.. ($counter seconds so far)"
        done
    fi
}

configure_antivirus() {
	if var_true "${ENABLE_ANTIVIRUS}" ; then
		clam_ready
		if [ "${SETUP_TYPE,,}" = "auto" ]; then
		    print_notice "Configuring Antivirus (${ANTIVIRUS_TYPE}) Filtering"

			if [ -n "${CLAMAV_PORT}" ] ; then
				clamav_port=":${CLAMAV_PORT}"
			fi

			cat <<EOF > /etc/rspamd/local.d/antivirus.conf
## Custom Generated Clam Antivirus Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

  ${ANTIVIRUS_TYPE} {
	  action = "${ANTIVIRUS_ACTION,,}";
	  scan_mime_parts = ${ANTIVIRUS_ATTACHMENTS_ONLY,,};
	  max_size = ${ANTIVIRUS_MAX_SIZE};
	  symbol = "CLAM_VIRUS";
	  type = "${ANTIVIRUS_TYPE}";
	  log_clean = ${ANTIVIRUS_LOG_CLEAN,,};
	  servers = "${CLAMAV_HOST}${clamav_port}";
	  patterns {
	    JUST_EICAR = "^Eicar-Test-Signature$";
	  }
	  whitelist = "${CONFIG_PATH}/${WHITELIST_ANTIVIRUS}";
  }

 .include(try=true,priority=5) "${DBDIR}/dynamic/antivirus.conf"
 .include(try=true,priority=10) "$LOCAL_CONFDIR/override.d/antivirus.conf"
EOF
		fi
	fi
}

configure_asn() {
	if var_true "${ENABLE_ASN}" ; then
		if [ "${SETUP_TYPE,,}" = "auto" ]; then
		    print_notice "Configuring ASN"
			cat <<EOF > /etc/rspamd/local.d/asn.conf
## Custom Generated ASN Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

provider_type = "rspamd";
provider_info {
  ip4 = "asn.rspamd.com";
  ip6 = "asn6.rspamd.com";
}
symbol = "ASN";
EOF
		fi
	fi
}

## Configure Bayesian
configure_classifier_bayesian() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
	    print_notice "Configuring Bayesian Filtering"
		cat <<EOF > /etc/rspamd/local.d/classifier_bayes.conf
## Custom Generated Classifier: Bayesian Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

backend = "redis";
new_schema = ${BAYESIAN_NEW_SCHEMA}
expire = ${BAYESIAN_EXPIRE};
min_learns = ${BAYESIAN_MIN_LEARNS};
store_tokens = ${BAYESIAN_STORE_TOKENS};
signatures = ${BAYESIAN_SIGNATURES};

# enable autolearn here if you want it:
autolearn = ${BAYESIAN_AUTOLEARN};
autolearn {
  spam_threshold = ${BAYESIAN_AUTOLEARN_SPAM_THRESHOLD}; # When to learn spam (score >= threshold)
  ham_threshold = ${BAYESIAN_AUTOLEARN_HAM_THRESHOLD}; # When to learn ham (score <= threshold)
  check_balance = ${BAYESIAN_AUTOLEARN_CHECK_BALANCE}; # Check spam and ham balance
  min_balance = ${BAYESIAN_AUTOLEARN_MIN_BALANCE};    # Keep diff for spam/ham learns for at least this value
}
EOF
	fi
}

configure_controller() {
	if var_true "${ENABLE_CONTROLLER}" ; then
        transform_file_var CONTROLLER_PASS
		if [ "${SETUP_TYPE,,}" = "auto" ]; then
	    	print_notice "Configuring Controller"
    		secure_ip_array=$(echo "$CONTROLLER_SECURE_IPS" | tr "," "\n")
			for ip in $secure_ip_array
			do
    			secure_ip="${secure_ip}$(cat <<EOF

secure_ip "${ip}";



EOF
										)"
			done
			cat <<EOF > /etc/rspamd/override.d/worker-controller.inc
## Custom Generated Controller Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
bind_socket = "${CONTROLLER_LISTEN_IP}:${CONTROLLER_LISTEN_PORT}";
count=${CONTROLLER_COUNT}
enable_password = "${CONTROLLER_PASS}";
${secure_ip}

.include(try=true; priority=10) "\$CONFDIR/override.d/worker-controller-password.inc"
.include(try=true; priority=20) "\$CONFDIR/override.d/worker-controller.custom.inc"
EOF
		fi
	fi
}

configure_data_dir() {
	### Set Permissions
	mkdir -p "${RSPAMD_DATA_LOCATION}"
	mkdir -p "${RSPAMD_DATA_LOCATION}"/data/dynamic
  mkdir -p "${RSPAMD_DATA_LOCATION}"/data
    if [ ! -d "${RSPAMD_DATA_LOCATION}"/maps.d ] ; then
        print_debug "Setting up Custom maps.d folder"
    	mkdir -p "${RSPAMD_DATA_LOCATION}"/maps.d
    	cp -R /assets/rspamd/maps.d/* "${RSPAMD_DATA_LOCATION}"/maps.d
    fi
  rm -rf /etc/rspamd/maps.d
  ln -sf "${RSPAMD_DATA_LOCATION}"/maps.d /etc/rspamd/maps.d
	chown -R rspamd:rspamd "${RSPAMD_DATA_LOCATION}"
	rm -rf /var/lib/rspamd
	ln -sf "${RSPAMD_DATA_LOCATION}"/data /var/lib/rspamd
}

configure_dmarc() {
	if var_true "${ENABLE_DMARC}" ; then
		if [ "${SETUP_TYPE,,}" = "auto" ]; then
			print_debug "Configuring DMARC"
			if var_true "${DMARC_ENABLE_REPORTING}" ; then
				if var_true "${DMARC_SEND_REPORTS}" ; then
	    			dmarc_report_settings=$(cat <<EOF
send_reports = ${DMARC_SEND_REPORTS,,};
report_settings {
  org_name = "${DMARC_ORG_NAME}";
  domain = "${DMARC_DOMAIN}";
  email = "${DMARC_EMAIL,,}";
  from_name = "${DMARC_FROM_NAME}";
  smtp = "${DMARC_SMTP_HOST}";
  smtp_port = ${DMARC_SMTP_PORT};
  helo = "${DMARC_SMTP_HELO}";
  retries = ${DMARC_SMTP_RETRIES};
}
EOF
										)
				fi
			fi

			cat <<EOF > /etc/rspamd/local.d/dmarc.conf
## Custom Generated DMARC Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
reporting = ${DMARC_ENABLE_REPORTING,,};
${dmarc_report_settings}
EOF
		fi
	fi

}

configure_dkim() {
	if var_true "${ENABLE_DKIM}" ; then
		mkdir -p "${RSPAMD_DATA_LOCATION}"/dkim
		chown -R rspamd:rspamd "${RSPAMD_DATA_LOCATION}"/dkim
		if [ "${SETUP_TYPE,,}" = "auto" ]; then
	    	print_notice "Configuring DKIM"
   		    if [ ! -f "${RSPAMD_DATA_LOCATION}"/dkim/"${DKIM_SELECTOR}".key ] ; then
   		    	sudo -u rspamd rspamadm dkim_keygen -b "${DKIM_KEY_SIZE}" -s "${DKIM_SELECTOR}" -k "${RSPAMD_DATA_LOCATION}"/dkim/"${DKIM_SELECTOR}".key > "${RSPAMD_DATA_LOCATION}"/dkim/"${DKIM_SELECTOR}"-dns.txt
   		    	echo "Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')" >> "${RSPAMD_DATA_LOCATION}"/dkim/"${DKIM_SELECTOR}"-dns.txt
                sed '1 s|^|local key = [[|' "${RSPAMD_DATA_LOCATION}"/dkim/"${DKIM_SELECTOR}".key | sed 's|-----END PRIVATE KEY-----|-----END PRIVATE KEY-----]]|g' > "${RSPAMD_DATA_LOCATION}"/dkim/"${DKIM_SELECTOR}".redis
                echo "redis.call('HMSET', 'DKIM_KEYS', '$DKIM_SELECTOR', key)" >> "${RSPAMD_DATA_LOCATION}"/dkim/"${DKIM_SELECTOR}".redis
                print_notice "***"
   		    	print_notice "DKIM: Key generated - You must add this entry to your Nameserver to complete the step"
   		    	cat "${RSPAMD_DATA_LOCATION}"/dkim/"${DKIM_SELECTOR}"-dns.txt
   		    	print_notice "It can also be found at ${RSPAMD_DATA_LOCATION}/dkim/${DKIM_SELECTOR}-dns.txt"
   		    	print_notice "***"
   		    	chmod 440 "${RSPAMD_DATA_LOCATION}"/dkim/*
   		    fi

            NUM=$(printenv | sort | grep -c '^DKIM.*_DOMAIN')
            for (( i = 1; i <= NUM; i++ )); do
                dkim_domain=DKIM${i}_DOMAIN
                dkim_selector=DKIM${i}_SELECTOR

                if [ "${!dkim_domain}" != "" ] ; then

                  if [ ! -f "${RSPAMD_DATA_LOCATION}"/dkim/"${!dkim_domain}"-"${!dkim_selector}".key ] ; then
                    sudo -u rspamd rspamadm dkim_keygen -b "${DKIM_KEY_SIZE}" -s "${!dkim_selector}" -k "${RSPAMD_DATA_LOCATION}"/dkim/"${!dkim_domain}"-"${!dkim_selector}".key > "${RSPAMD_DATA_LOCATION}"/dkim/"${!dkim_domain}"-"${!dkim_selector}".dns.txt
                    echo "Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')" >> "${RSPAMD_DATA_LOCATION}"/dkim/"${!dkim_domain}"-"${!dkim_selector}".dns.txt
                    sed '1 s|^|local key = [[|' "${RSPAMD_DATA_LOCATION}"/dkim/"${!dkim_domain}"-"${!dkim_selector}".key | sed 's|-----END PRIVATE KEY-----|-----END PRIVATE KEY-----]]|g' > "${RSPAMD_DATA_LOCATION}"/dkim/"${!dkim_domain}"-"${!dkim_selector}".redis
                    echo "redis.call('HMSET', 'DKIM_KEYS', '${!dkim_selector}.${!dkim_domain}', key)" >> "${RSPAMD_DATA_LOCATION}"/dkim/"${!dkim_domain}"-"${!dkim_selector}".redis
                    print_notice "***"
                    print_notice "DKIM: Key generated for '${!dkim_domain}' with selector '${!dkim_selector}' - You must add this entry to your Nameserver to complete the step"
                    cat "${RSPAMD_DATA_LOCATION}"/dkim/"${!dkim_domain}"-"${!dkim_selector}".dns.txt
                    print_notice "It can also be found at '${RSPAMD_DATA_LOCATION}/dkim/${!dkim_domain}-${!dkim_selector}.dns.txt'"
                    print_notice "***"
                    chmod 440 "${RSPAMD_DATA_LOCATION}"/dkim/*
                  fi
                  dkim_domains=$(echo "${dkim_domains}" ; cat<<EOF
domain { ${!dkim_domain} { path = "${RSPAMD_DATA_LOCATION}/dkim/${!dkim_domain}-${!dkim_selector}.key"; selector = "${!dkim_selector}"; }}
EOF
              )
                fi
            done

 	    	cat <<EOF > /etc/rspamd/local.d/dkim_signing.conf
## Custom Generated DKIM Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

path = ${RSPAMD_DATA_LOCATION}/dkim/${DKIM_SELECTOR}.key;
selector = "${DKIM_SELECTOR}";
allow_envfrom_empty = ${DKIM_ALLOW_ENVFROM_EMPTY,,};
allow_hdrfrom_mismatch = ${DKIM_ALLOW_HDRFROM_MISMATCH,,};
allow_hdrfrom_multiple = ${DKIM_ALLOW_HDRFROM_MULTIPLE,,};
allow_username_mismatch = ${DKIM_ALLOW_USERNAME_MISMATCH,,};
sign_local = ${DKIM_SIGN_LOCAL,,};
sign_authenticated = ${DKIM_SIGN_AUTH,,};
symbol = "DKIM_SIGNED";
try_fallback = ${DKIM_TRY_FALLBACK,,};
use_domain = "${DKIM_USE_DOMAIN,,}";
use_esld = ${DKIM_USE_ESLD,,};
use_redis = false;
key_prefix = "DKIM_KEYS";
sign_headers = "from:sender:reply-to:subject:date:message-id:to:cc:mime-version:content-type:content-transfer-encoding:content-language:resent-to:resent-cc:resent-from:resent-sender:resent-message-id:in-reply-to:references:list-id:list-help:list-owner:list-unsubscribe:list-subscribe:list-post:list-unsubscribe-post:disposition-notification-to:disposition-notification-options:original-recipient:openpgp:autocrypt";
${dkim_domains}
EOF

			if var_true "${ENABLE_ARC}" ; then
				print_notice "Configuring ARC"
				cat <<EOF > /etc/rspamd/local.d/arc.conf
## Custom Generated ARC Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

path = ${RSPAMD_DATA_LOCATION}/dkim/${DKIM_SELECTOR}.key;
selector = "${DKIM_SELECTOR}";
allow_envfrom_empty = ${ARC_ALLOW_ENVFROM_EMPTY,,};
allow_hdrfrom_mismatch = ${ARC_ALLOW_HDRFROM_MISMATCH,,};
allow_hdrfrom_multiple = ${ARC_ALLOW_HDRFROM_MULTIPLE,,};
allow_username_mismatch = ${ARC_ALLOW_USERNAME_MISMATCH,,};
auth_only = ${ARC_AUTH_ONLY,,};
key_prefix = "DKIM_KEYS";
sign_inbound = ${ARC_SIGN_INBOUND,,};
sign_local = ${ARC_SIGN_LOCAL,,};
symbol = "ARC_SIGNED";
try_fallback = ${ARC_TRY_FALLBACK,,};
use_domain = "${ARC_USE_DOMAIN,,}";
use_esld = ${ARC_USE_ESLD,,};
use_redis = false;
${dkim_domains}
EOF
			fi
      transform_file_var \
                            REDIS_DB \
                            REDIS_HOST \
                            REDIS_PASS \
                            REDIS_PORT
      if [ -n "${REDIS_PASS}" ]; then redispassarg="--pass ${REDIS_PASS}" ; fi ;
      sleep 5
      silent redis-cli -h "${REDIS_HOST}" -p "${REDIS_PORT}" -n "${REDIS_DB}" "${redispassarg}" DEL DKIM_KEYS

      for redis_dkim_script in "${RSPAMD_DATA_LOCATION}"/dkim/*.redis ; do
                print_debug "Redis DKIM Script executing: '${redis_dkim_script}'"
                silent redis-cli -h "${REDIS_HOST}" -p "${REDIS_PORT}" -n "${REDIS_DB}" "${redispassarg}" --eval "${redis_dkim_script}"
      done
		fi
	fi
}

configure_greylist() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
	    print_notice "Configuring Greylist"
		cat <<EOF > /etc/rspamd/local.d/greylist.conf
## Custom Generated Greylist Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
enabled = ${ENABLE_GREYLIST,,};
EOF

	fi
}

configure_history() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
	    print_notice "Configuring Redis History"
		cat <<EOF > /etc/rspamd/local.d/history_redis.conf
## Custom Generated Redis History Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

nrows = ${HISTORY_ROWS_LIMIT};
compress = ${HISTORY_COMPRESS,,};
subject_privacy = ${HISTORY_SUBJECT_PRIVACY,,};

EOF
	fi
}

configure_logging() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
	    print_notice "Configuring Logging"

		debug_log_array=$(echo "${LOG_DEBUG_MODULES}" | tr "," "\n")
		counter=1
		for module in $debug_log_array
		do
			if [ "$counter" -gt "1" ]; then
				comma=","
			fi
			debug_modules=${debug_modules}${comma}\"${module}\"
			(( counter+=1 ))
		done

		if [ "${LOG_TYPE,,}" = "file" ] ; then
			mkdir -p "${LOG_LOCATION}"
			chown -R rspamd:rspamd "${LOG_LOCATION}"
            touch "${LOG_LOCATION}"/"${LOG_FILE}"
			chown -R rspamd:rspamd "${LOG_LOCATION}"
			create_logrotate rspamd "${LOG_LOCATION}"/"${LOG_FILE}" none rspamd rspamd
			log_argument="> ${LOG_LOCATION}/${LOG_FILE}"
		fi

		cat <<EOF > /etc/rspamd/local.d/logging.inc
## Custom Generated Logging Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

type = ${LOG_TYPE,,};
filename = '${LOG_LOCATION}${LOG_FILE}';
level = ${LOG_LEVEL};
color = ${LOG_CONSOLE_COLORIZE,,};
log_usec = ${LOG_USEC,,};
log_severity ${LOG_SEVERITY,,};
debug_modules = [${debug_modules}];
EOF

	fi
}

configure_milter() {
	if var_true "${ENABLE_MILTER}" ; then
		if [ "${SETUP_TYPE,,}" = "auto" ]; then
		    print_notice "Configuring Milter"
			cat <<EOF > /etc/rspamd/local.d/milter_headers.conf
## Custom Generated Milter Headers Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

use = ["x-spam-status","authentication-results", "fuzzy-hashes"];
skip_local = true;
skip_authenticated = true;
custom {
   my-x-spam-score = <<EOD
     return function(task, common_meta)
       local sc = common_meta['metric_score'] or task:get_metric_score()
       -- return no error
       return nil,
       -- header(s) to add
       {['X-Spam-Score'] = string.format('%.2f', sc[1])},
       -- header(s) to remove
       {['X-Spam-Score'] = 1},
       -- metadata to store
       {}
   end
EOD;
}
routines {
  spam-header {
    header = "X-Spam-Flag";
    value = "YES";
    remove = 1;
  }
  fuzzy-hashes {
    header = "X-Rspamd-Fuzzy";
  }
  authentication-results {
    header = "Authentication-Results";
    add_smtp_user = false;
    remove = 1;
    spf_symbols {
      pass = "R_SPF_ALLOW";
      fail = "R_SPF_FAIL";
      softfail = "R_SPF_SOFTFAIL";
      neutral = "R_SPF_NEUTRAL";
      temperror = "R_SPF_DNSFAIL";
      none = "R_SPF_NA";
      permerror = "R_SPF_PERMFAIL";
    }
    dkim_symbols {
      pass = "R_DKIM_ALLOW";
      fail = "R_DKIM_REJECT";
      temperror = "R_DKIM_TEMPFAIL";
      none = "R_DKIM_NA";
      permerror = "R_DKIM_PERMFAIL";
    }
    dmarc_symbols {
      pass = "DMARC_POLICY_ALLOW";
      permerror = "DMARC_BAD_POLICY";
      temperror = "DMARC_DNSFAIL";
      none = "DMARC_NA";
      reject = "DMARC_POLICY_REJECT";
      softfail = "DMARC_POLICY_SOFTFAIL";
      quarantine = "DMARC_POLICY_QUARANTINE";
    }
  }
}
EOF
			cat <<EOF > /etc/rspamd/override.d/milter_headers.conf
extended_spam_headers=${MILTER_EXTENDED_SPAM_HEADERS,,};
EOF
		fi
	fi
}

configure_mx_check() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
	    print_notice "Configuring MX Checking"
		cat <<EOF > /etc/rspamd/local.d/mx_check.conf
## Custom Generated MX Check Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

enabled = ${ENABLE_MX_CHECK,,};
timeout = ${MX_CHECK_TIMEOUT};
symbol_bad_mx = "MX_INVALID";
symbol_no_mx = "MX_MISSING";
symbol_good_mx = "MX_GOOD";
expire = ${MX_CHECK_EXPIRE};
key_prefix = "rmx";
EOF
	fi
}

configure_neural() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
	    print_notice "Configuring Neural Training"
	    cat <<EOF > /etc/rspamd/local.d/neural.conf
## Custom Generated MX Check Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

enabled = ${ENABLE_NEURAL,,};

train {
  max_trains = ${NEURAL_MAX_TRAIN}; # Number ham/spam samples needed to start train
  max_usages = ${NEURAL_MAX_USAGES}; # Number of learn iterations while ANN data is valid was 20
  learning_rate = ${NEURAL_LEARNING_RATE}; # Rate of learning
  max_iterations = ${NEURAL_MAX_ITERATIONS}; # Maximum iterations of learning (better preciseness but also lower speed of learning)
}

ann_expire = ${NEURAL_ANN_EXPIRE}; # For how long ANN should be preserved in Redis
EOF
	    cat <<EOF > /etc/rspamd/local.d/neural_group.conf
## Custom Generated MX Check Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

symbols = {
  "NEURAL_SPAM_LONG" {
    weight = 3.7; # sample weight
    description = "Neural network spam (long)";
  }
  "NEURAL_HAM_LONG" {
    weight = -4.0; # sample weight
    description = "Neural network ham (long)";
  }
  "NEURAL_SPAM_SHORT" {
    weight = 2.5; # sample weight
    description = "Neural network spam (short)";
  }
  "NEURAL_HAM_SHORT" {
    weight = -2.0; # sample weight
    description = "Neural network ham (short)";
  }
}
EOF
	fi
}

configure_oletools() {
	if var_true "${ENABLE_OLETOOLS}" ; then
		olefy_ready
		if [ "${SETUP_TYPE,,}" = "auto" ]; then
		    print_notice "Configuring OLE Tools"
			cat <<EOF > /etc/rspamd/local.d/external_services.conf
## Custom Generated External Services Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

oletools {
  servers = "${OLETOOLS_HOST}:${OLETOOLS_PORT}";
  scan_mime_parts = ${OLETOOLS_SCAN_MIME,,};
  extended = ${OLETOOLS_BLOCK_ALL_MACROS,,};
}
EOF
		fi
	fi
}

configure_phishing() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
	    print_notice "Configuring Phishing"
		cat <<EOF > /etc/rspamd/local.d/phishing.conf
## Custom Generated Phishing Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

openphish_enabled = ${PHISHING_ENABLE_OPENPHISH,,};
openphish_map     = "${PHISHING_OPENPHISH_FEED}";
openphish_premium = ${PHISHING_OPENPHISH_PREMIUM};
phishtank_enabled = ${PHISHING_ENABLE_PHISHTANK,,};
EOF
	fi
}

configure_redis() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
	    print_notice "Configuring Redis"
        transform_file_var \
                                REDIS_DB \
                                REDIS_HOST \
                                REDIS_PASS \
                                REDIS_PORT
		if [ -n "${REDIS_PASS}" ] ; then
           redis_pass='password = "'${REDIS_PASS}'";'
        fi
		cat <<EOF > /etc/rspamd/local.d/redis.conf
## Custom Generated Redis Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

servers = "${REDIS_HOST}:${REDIS_PORT}";
timeout = "${REDIS_TIMEOUT}";
db = "${REDIS_DB}";
${redis_pass}
EOF
    fi
}

configure_reputation() {
	if var_true "${ENABLE_REPUTATION}" ; then
		if [ "${SETUP_TYPE,,}" = "auto" ]; then
		    print_notice "Configuring Reputation"
			cat <<EOF > /etc/rspamd/local.d/reputation.conf
## Custom Generated Repuation Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

rules {
  ip_reputation = {
    selector "ip" {
    }
    backend "redis" {
    }

    symbol = "IP_REPUTATION";
  }
  spf_reputation =  {
    selector "spf" {
    }
    backend "redis" {
    }

    symbol = "SPF_REPUTATION";
  }
  dkim_reputation =  {
    selector "dkim" {
    }
    backend "redis" {
    }

    symbol = "DKIM_REPUTATION"; # Also adjusts scores for DKIM_ALLOW, DKIM_REJECT
  }
  generic_reputation =  {
    selector "generic" {
      selector = "ip"; # see https://rspamd.com/doc/configuration/selectors.html
    }
    backend "redis" {
    }

    symbol = "GENERIC_REPUTATION";
  }
}
EOF
		fi
	fi
}

configure_rspamd_options() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
	    print_notice "Configuring RSpamD Options"
		cat <<EOF > /etc/rspamd/local.d/rspamd_options.conf
## Custom Generated rspamd configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

local_addrs = "${LOCAL_IPS}";
EOF

		cat <<EOF > /etc/rspamd/local.d/actions.conf
## Custom Generated Actions Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

add_header = ${METRICS_ADD_HEADER};
greylist = ${METRICS_GREYLIST};
reject = ${METRICS_REJECT};
rewrite_subject = ${METRICS_REWRITE_SUBJECT};
subject = "${REWRITE_SUBJECT}";

EOF

		cat <<EOF > /etc/rspamd/local.d/composites.conf
## Custom Generated Composites Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

MX_IMPLICIT {
  expression = "MX_GOOD & MX_MISSING";
  score = -0.01;
}
VIRUS_FOUND {
  expression = "CLAM_VIRUS";
  score = 2000.0;
}

SPF_FAIL_NO_DKIM {
  expression = "R_SPF_FAIL & R_DKIM_NA & !ARC_ALLOW";
  score = 10;
}

#SPOOFED_UNAUTH {
#  expression = "!RSPAMD_HOST";
#  score = 5.0;
#}

OLEFY_MACRO {
  expression = "OLETOOLS";
  score = 20.0;
  policy = "remove_weight";
}

BAD_WORD_BAD_TLD {
  expression = "FISHY_TLD & BAD_WORDS"
  score = 10.0;
}

FORGED_W_BAD_POLICY {
  expression = "( ~g+:policies | ~R_SPF_NA) & ( ~FROM_NEQ_ENVFROM & ~FORGED_SENDER ) & !WHITELISTED_FWD_HOST"
  score = 3.0;
}

RBL_EXCLUDE_FWD_HOST {
  expression = "-WHITELISTED_FWD_HOST & ^g:rbl"
}

SPF_EXCLUDE_FWD_HOST {
  expression = "-WHITELISTED_FWD_HOST & (^R_SPF_PERMFAIL | ^R_SPF_SOFTFAIL | ^R_SPF_FAIL)"
}

HFILTER_EXCLUDE_FWD_HOST {
  expression = "-WHITELISTED_FWD_HOST & ^g:hfilter"
}

NEURAL_EXCLUDE_FWD_HOST {
  expression = "-WHITELISTED_FWD_HOST & ^g:neural"
}

UPSTREAM_CHECKS_EXCLUDE_FWD_HOST {
  expression = "(-SIEVE_HOST | -WHITELISTED_FWD_HOST) & (^UNITEDINTERNET_SPAM | ^SPAM_FLAG | ^KLMS_SPAM | ^AOL_SPAM | ^MICROSOFT_SPAM)"
}

SPOOFED_UNAUTH_POLICY_FAILURE {
  expression = "-SPOOFED_UNAUTH & -R_SPF_FAIL";
  score = 50.0;
}
EOF

		cat <<EOF > /etc/rspamd/local.d/fuzzy_check.conf
## Custom Generated Fuzzy Check Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
rule "local" {
    # Fuzzy storage server list
    servers = "127.0.0.1:${WORKER_FUZZY_LISTEN_PORT}";
    # Default symbol for unknown flags
    symbol = "LOCAL_FUZZY_UNKNOWN";
    # Additional mime types to store/check
    mime_types = ["application/*"];
    # Hash weight threshold for all maps
    max_score = 100.0;
    # Whether we can learn this storage
    read_only = no;
    # Ignore unknown flags
    skip_unknown = yes;
    # Hash generation algorithm
    algorithm = "mumhash";

    # Map flags to symbols
    fuzzy_map = {
        LOCAL_FUZZY_DENIED {
            max_score = 10.0;
            flag = 11;
        }
        LOCAL_FUZZY_WHITE {
            max_score = 5.0;
            flag = 13;
        }
    }
}

rule "mailcow" {
    # Fuzzy storage server list
    servers = "fuzzy.mailcow.email:11445";
    # Default symbol for unknown flags
    symbol = "MAILCOW_FUZZY_UNKNOWN";
    # Additional mime types to store/check
    mime_types = ["application/*"];
    # Hash weight threshold for all maps
    max_score = 100.0;
    # Whether we can learn this storage
    read_only = yes;
    # Ignore unknown flags
    skip_unknown = yes;
    # Hash generation algorithm
    algorithm = "mumhash";

    # Map flags to symbols
    fuzzy_map = {
        MAILCOW_FUZZY_DENIED {
            max_score = 10.0;
            flag = 11;
        }
    }
}
EOF

		cat <<EOF > /etc/rspamd/local.d/fuzzy_group.conf
## Custom Generated Fuzzy Group Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

symbols = {
    "LOCAL_FUZZY_UNKNOWN" {
        weight = 0.1;
    }
    "LOCAL_FUZZY_DENIED" {
        weight = 15.0;
    }
    "MAILCOW_FUZZY_UNKNOWN" {
        weight = 0.1;
    }
    "MAILCOW_FUZZY_DENIED" {
        weight = 7.0;
    }
    "LOCAL_FUZZY_WHITE" {
        weight = -10.0;
    }
}
EOF

		cat <<EOF > /etc/rspamd/local.d/force_actions.conf
## Custom Generated Force Actions Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

rules {
  WHITELIST_FORWARDING_HOST_NO_REJECT {
    action = "add header";
    expression = "WHITELISTED_FWD_HOST";
    require_action = ["reject"];
  }
  WHITELIST_FORWARDING_HOST_NO_GREYLIST {
    action = "no action";
    expression = "WHITELISTED_FWD_HOST";
    require_action = ["greylist", "soft reject"];
  }
}
EOF

		cat <<EOF > /etc/rspamd/local.d/groups.conf
## Custom Generated Groups Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

symbols {
  "CTYPE_MIXED_BOGUS" {
    score = 0.0;
  }
  "BAD_REP_POLICIES" {
    score = 2.0;
  }
  "BAD_HEADER" {
    score = 10.0;
  }
  "BULK_HEADER" {
    score = 4.0;
  }
}

group "MX" {
  "MX_INVALID" {
    score = 0.5;
    description = "No connectable MX";
    one_shot = true;
  }
  "MX_MISSING" {
    score = 2.0;
    description = "No MX record";
    one_shot = true;
  }
  "MX_GOOD" {
    score = -0.01;
    description = "MX was ok";
    one_shot = true;
  }
}

group "reputation" {
    symbols = {
        "IP_REPUTATION_HAM" {
            weight = 1.0;
        }
        "IP_REPUTATION_SPAM" {
            weight = 4.0;
        }

        "DKIM_REPUTATION" {
            weight = 1.0;
        }

        "SPF_REPUTATION_HAM" {
            weight = 1.0;
        }
        "SPF_REPUTATION_SPAM" {
            weight = 2.0;
        }
        "GENERIC_REPUTATION" {
            weight = 0.0;
        }
    }
}
EOF

		cat <<EOF > /etc/rspamd/local.d/headers_group.conf
## Custom Generated Headers-Group Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

symbols = {
  "R_MIXED_CHARSET" {
    weight = 1.0;
    description = "Mixed characters in a message";
    one_shot = true;
  }
}
EOF

		cat <<EOF > /etc/rspamd/local.d/hfilter_group.conf
## Custom Generated Hostname Group Filter Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

symbols = {
    "HFILTER_HOSTNAME_UNKNOWN" {
        score = 2.5;
    }
}
EOF

		cat <<EOF > /etc/rspamd/local.d/ip_score.conf
## Custom Generated IP Score Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

actions {
  reject = 1.0;
  "add header" = 0.25;
  "rewrite subject" = 0.25;
  "no action" = 1.0;
}

scores {
  asn = 0.5;
  country = 0.1;
  ipnet = 0.8;
  ip = 1.0;
}

asn_prefix = "a:";
country_prefix = "c:";
hash = "ip_score";
ipnet_prefix = "n:";
lower_bound = 10;
metric = "default";
max_score = 10;
min_score = -5;
score_divisor = 10;
symbol = "IP_SCORE";
EOF

		cat <<EOF > /etc/rspamd/local.d/metrics.conf
## Custom Generated Metrics Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

symbol "SPOOF_REPLYTO" {
weight = ${METRICS_SPOOF_REPLYTO};
}
EOF

		cat <<EOF > /etc/rspamd/local.d/multimap.conf
## Custom Generated MultiMap Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

RCPT_WANTS_SUBJECT_TAG {
  type = "rcpt";
  filter = "email:addr";
  map = "redis://RCPT_WANTS_SUBJECT_TAG";
  symbols_set = ["RCPT_WANTS_SUBJECT_TAG"];
}

RCPT_WANTS_SUBFOLDER_TAG {
  type = "rcpt";
  filter = "email:addr";
  map = "redis://RCPT_WANTS_SUBFOLDER_TAG";
  symbols_set = ["RCPT_WANTS_SUBFOLDER_TAG"];
}

WHITELISTED_FWD_HOST {
  type = "ip";
  map = "redis://WHITELISTED_FWD_HOST";
  symbols_set = ["WHITELISTED_FWD_HOST"];
}

BULK_HEADER {
  type = "content";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/bulk_header.map";
  filter = "headers"
  regexp = true;
  symbols_set = ["BULK_HEADER"];
}

BAD_HEADER {
  type = "content";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/bad_header.map";
  filter = "headers"
  regexp = true;
  symbols_set = ["BAD_HEADER"];
}

LOCAL_BL_ASN {
  type = "asn";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/bad_asn.map";
  score = 5;
  description = "Sender's ASN is on the local blacklist";
  symbols_set = ["LOCAL_BL_ASN"];
}

GLOBAL_SMTP_FROM_WL {
  type = "from";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/global_smtp_from_whitelist.map";
  regexp = true;
  score = -2050;
}

GLOBAL_SMTP_FROM_BL {
  type = "from";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/global_smtp_from_blacklist.map";
  regexp = true;
  prefilter = true;
  action = "reject";
}

GLOBAL_MIME_FROM_WL {
  type = "header";
  header = "from";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/global_mime_from_whitelist.map";
  regexp = true;
  score = -2050;
}

GLOBAL_MIME_FROM_BL {
  type = "header";
  header = "from";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/global_mime_from_blacklist.map";
  regexp = true;
  prefilter = true;
  action = "reject";
}

GLOBAL_RCPT_WL {
  type = "rcpt";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/global_rcpt_whitelist.map";
  regexp = true;
  prefilter = true;
  action = "accept";
}

GLOBAL_RCPT_BL {
  type = "rcpt";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/global_rcpt_blacklist.map";
  regexp = true;
  prefilter = true;
  action = "reject";
}

RSPAMD_HOST {
  type = "ip";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/rspamd_trusted.map";
  symbols_set = ["RSPAMD_HOST"];
}

IP_WHITELIST {
  type = "ip";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/ip_wl.map";
  symbols_set = ["IP_WHITELIST"];
  score = -2050;
}

FISHY_TLD {
  type = "from";
  filter = "email:domain";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/fishy_tlds.map";
  regexp = true;
  score = 0.1;
}

BAD_WORDS {
  type = "content";
  filter = "text";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/bad_words.map";
  regexp = true;
  score = 0.1;
}

BAD_LANG {
  type = 'selector';
  selector = 'languages';
  map = "${RSPAMD_DATA_LOCATION}/maps.d/bad_languages.map";
  symbols_set = ["LANG_FILTER"];
  regexp = true;
  score = 5.0;
}

BAZAR_ABUSE_CH {
  type = "selector";
  selector = "attachments(hex,md5)";
  map = "https://bazaar.abuse.ch/export/txt/md5/recent/";
  score = 10.0;
}

WHITELIST_SENDER_DOMAIN {
  type = "from";
  filter = "email:domain";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/whitelist.sender.domain.map";
  score = -10.0
}

SUBJECT_BLACKLISTED {
  type = "header";
  header = "Subject";
  map = "${RSPAMD_DATA_LOCATION}/maps.d/global_subject_blacklist.map";
  regexp = true;
  action = "reject"; # Prefilter mode
  description = "Blacklist map for SUBJECT_BLACKLISTED";
}

EOF

		cat <<EOF > /etc/rspamd/local.d/policies_group.conf
## Custom Generated Policies-Group Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

symbols = {
    "ARC_REJECT" {
        score = 0.0;
    }
    "R_SPF_FAIL" {
        score = 10.0;
    }
    "R_SPF_PERMFAIL" {
        score = 10.0;
    }
    "R_DKIM_REJECT" {
        score = 10.0;
    }
    "DMARC_POLICY_REJECT" {
        weight = 20.0;
    }
    "DMARC_POLICY_QUARANTINE" {
        weight = 10.0;
    }
    "DMARC_POLICY_SOFTFAIL" {
        weight = 2.0;
    }
}
EOF

    if var_true "${ENABLE_RATELIMITING}" ; then
      cat <<EOF > /etc/rspamd/local.d/ratelimit.conf
## Custom Generated Ratelimit Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

rates {
    from_limit = {
      selector = 'from.lower';
      bucket = [
        {
          burst = ${RATELIMIT_FROM_BURST};
          rate = "${RATELIMIT_FROM_RATE}";
        }
      ]
    }

    rcpt_limit = {
      selector = 'rcpts:addr.take_n(5).lower';
      bucket = {
        burst = ${RATELIMIT_RCPT_BURST};
        rate = "${RATELIMIT_RCPT_RATE}";
      }
    }
  }
EOF
    fi

		cat <<EOF > /etc/rspamd/local.d/statistic.conf
## Custom Generated Statistic Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

classifier "bayes" {
    tokenizer {
      name = "osb";
    }
    backend = "redis";
    min_tokens = 11;
    min_learns = 5;
    new_schema = true;
    expire = 2592000;
    statfile {
      symbol = "BAYES_HAM";
      spam = false;
    }
    statfile {
      symbol = "BAYES_SPAM";
      spam = true;
    }
    autolearn {
      spam_threshold = 12.0;
      ham_threshold = -4.5;
      check_balance = true;
      min_balance = 0.9;
    }
}
EOF

		cat <<EOF > /etc/rspamd/local.d/statistics_group.conf
## Custom Generated Statistics Group Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

symbols = {
    "BAYES_SPAM" {
        weight = 2.5;
        description = "Message probably spam, probability: ";
    }
    "BAYES_HAM" {
        weight = -5.5;
        description = "Message probably ham, probability: ";
    }
}
EOF

		cat <<EOF > /etc/rspamd/override.d/worker-normal.inc
## Custom Generated Worker Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

bind_socket = "${WORKER_LISTEN_IP}:${WORKER_LISTEN_PORT}";
task_timeout = ${WORKER_TASK_TIMEOUT};
count = ${WORKER_COUNT};

.include(try=true; priority=20) "$CONFDIR/override.d/worker-normal.custom.inc"
EOF
		if [ "${NAMESERVER}" != "127.0.0.1" ] ; then
			nameserver_ready
        	print_debug "Setting Custom Nameserver"
			cat <<EOF > /etc/rspamd/local.d/options.inc
dns {
  nameserver = ["${NAMESERVER}"];
  timeout = ${NAMESERVER_TIMEOUT};
}
EOF
		fi

		echo "map_watch_interval = ${MAP_WATCH_INTERVAL};" >> /etc/rspamd/local.d/options.inc
    echo "soft_reject_on_timeout = true;" >> /etc/rspamd/local.d/options.inc
	fi
}

configure_spamtrap() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
	    print_notice "Configuring Spamtrap"
		cat <<EOF > /etc/rspamd/local.d/spamtrap.conf
## Custom Generated Spamtrap Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

enabled = ${ENABLE_SPAMTRAP,,};
action = "${SPAMTRAP_ACTION,,}";
score = ${SPAMTRAP_SCORE};
learn_fuzzy = ${SPAMTRAP_LEARN_FUZZY,,};
learn_spam = ${SPAMTRAP_LEARN_SPAM,,};
map = file://${RSPAMD_DATA_LOCATION}/maps.d/spamtrap.map;
EOF
	fi
}

configure_url_reputation() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
	    print_notice "Configuring URL Reputation Checking"
		cat <<EOF > /etc/rspamd/local.d/url_reputation.conf
## Custom Generated URL Reputation Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

enabled = ${ENABLE_URL_REPUTATION,,};
key_prefix = "Ur.";

symbols {
  white = "URL_REPUTATION_WHITE";
  black = "URL_REPUTATION_BLACK";
  grey = "URL_REPUTATION_GREY";
  neutral = "URL_REPUTATION_NEUTRAL";
}

foreign_symbols {
  dmarc = "DMARC_POLICY_ALLOW";
  dkim = "R_DKIM_ALLOW";
  spf = "R_SPF_ALLOW";
}

ignore_surbl = ["URIBL_BLOCKED", "DBL_PROHIBIT", "SURBL_BLOCKED"];

# Amount of samples required for scoring - default 5
threshold = 5;
# Maximum number of TLDs to update reputation on (default 1)
update_limit = 1;
# Maximum number of TLDs to query reputation on (default 100)
query_limit = 100;
# If true, try to find most 'relevant' URL (default true)
relevance = true;
EOF
	fi
}

configure_url_tags() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
	    print_notice "Configuring URL Tags Checking"
		cat <<EOF > /etc/rspamd/local.d/url_tags.conf
## Custom Generated URL Tags Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

enabled = ${ENABLE_URL_TAGS};
EOF
	fi
}

configure_worker_fuzzy() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
    	print_notice "Configuring Worker: Fuzzy"
		fuzzy_ip_array=$(echo "$WORKER_FUZZY_ALLOW_UPDATE_IPS" | tr "," "\n")
		counter=1
		for ip in $fuzzy_ip_array
		do
			if [ "$counter" -gt "1" ]; then
				comma=","
			fi
			fuzzy_ip=${fuzzy_ip}${comma}\"${ip}\"
			(( counter+=1 ))
    		done
		cat <<EOF > /etc/rspamd/override.d/worker-fuzzy.inc
## Custom Generated Worker Fuzzy Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

bind_socket "${WORKER_FUZZY_LISTEN_IP}:${WORKER_FUZZY_LISTEN_PORT}"
count = ${WORKER_FUZZY_COUNT};
backend = "redis";
expire = ${WORKER_FUZZY_EXPIRE};
allow_update = ["127.0.0.1"];
sync = ${WORKER_FUZZY_SYNC};
EOF
	fi
}

configure_worker_proxy() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
    	print_notice "Configuring Worker: Proxy"
		cat <<EOF > /etc/rspamd/override.d/worker-proxy.inc
## Custom Generated Worker Proxy Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

bind_socket = "${WORKER_PROXY_LISTEN_IP}:${WORKER_PROXY_LISTEN_PORT}";
milter = ${ENABLE_MILTER};
timeout = ${WORKER_PROXY_TIMEOUT};
upstream "local" {
  name = "localhost";
  default = true;
  hosts = "127.0.0.1:${WORKER_LISTEN_PORT}"
}

spam_header = "${WORKER_PROXY_SPAM_HEADER}";
count = ${WORKER_PROXY_COUNT};
max_retries = ${WORKER_PROXY_MAX_RETRY};
discard_on_reject = ${WORKER_PROXY_REJECT_DISCARD}; # Discard message instead of rejection
quarantine_on_reject = ${WORKER_PROXY_REJECT_QUARANTINE}; # Tell MTA to quarantine rejected messages
reject_message = "${WORKER_PROXY_REJECT_MESSAGE}"; # Use custom rejection message
EOF
	fi
}
